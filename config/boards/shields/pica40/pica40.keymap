#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUNC 4
#define BOOT 5

&lt {
    tapping-term-ms = <220>;
    quick-tap-ms = <150>;
};

/ {

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };


        // Easy alt-tab with alt+space thumb using mod-morphs

        spctab: space_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_TAB";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp TAB>;
            mods = <MOD_LALT>;
            keep-mods = <(MOD_LALT)>;
        };
        lt_spc: layer_tap_space_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_ST";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            bindings = <&nav>, <&spctab>;
        };
    };

    // layer macros


    // caps
    combos {
        compatible = "zmk,combos";

        combo_caps {
            timeout-ms = <50>;
            key-positions = <10 22>;
            layers = <0>;
            bindings = <&kp CAPS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                           &kp Q       &kp W       &kp E        &kp R        &kp T        &kp Y  &kp U        &kp I        &kp O       &kp P
                &kp EQUAL  &ht LGUI A  &ht LALT S  &ht LCTRL D  &ht LSHFT F  &kp G        &kp H  &ht RSHFT J  &ht RCTRL K  &ht RALT L  &ht RGUI SEMI  &kp SQT
                &kp MINUS  &kp Z       &kp X       &kp C        &kp V        &kp B        &kp N  &kp M        &kp COMMA    &kp DOT     &kp FSLH       &kp GRAVE
                                            &kp ESC  &lt NAV TAB  &lt_spc SYM 0    &lt NUM BSPC  &lt FUNC ENTER  &kp DEL
                >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LC(RIGHT) LC(LEFT)>;
        };

        nav_layer {
            bindings = <
                       &none     &none     &none      &none      &none        &none    &none     &kp UP     &none      &kp PG_UP
                &none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none        &none    &kp LEFT  &kp DOWN   &kp RIGHT  &kp PG_DN  &kp INS
                &none  &none     &none     &none      &none      &none        &none    &kp HOME  &kp END    &none      &none      &none
                                                     &none  &trans  &none    &none  &none  &none
                >;
        };

        number_layer {
            bindings = <
                          &kp PLUS   &kp N7  &kp N8  &kp N9  &kp N0         &none  &none      &none      &none     &none
                &kp STAR  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp BSPC       &none  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &kp LCTRL
                &kp FSLH  &kp EQUAL  &kp N1  &kp N2  &kp N3  &kp ENTER      &none  &none      &none      &none     &none     &kp BSPC
                                             &none   &none  &none           &trans &none      &none
                >;
        };

        symbol_layer {
            bindings = <
                           &kp EXCL  &kp AT    &kp HASH   &kp DLLR   &kp PRCNT       &kp CARET  &kp AMPS   &kp STAR   &kp GRAVE  &kp TILDE
                &none      &kp DQT   &kp LBKT  &kp LBRC   &kp LPAR   &kp LT          &kp FSLH   &kp MINUS  &kp EQUAL  &kp COLON  &kp SEMI   &kp LCTRL
                &none      &kp SQT   &kp RBKT  &kp RBRC   &kp RPAR   &kp GT          &kp BSLH   &kp UNDER  &kp PLUS   &kp PIPE   &kp QMARK  &kp BSPC
                                                   &none  &none  &trans    &none  &none  &none
                >;
        };

        function_layer {
            bindings = <
                        &kp F1  &kp F2   &kp F3   &kp F4   &none           &bt BT_SEL 0  &bt BT_SEL 2  &kp C_MUTE     &kp C_BRI_UP    &none
                &none   &kp F5  &kp F6   &kp F7   &kp F8   &none           &bt BT_SEL 1  &bt BT_SEL 3  &kp LG(LS(S))  &kp C_BRI_DN    &none  &out OUT_TOG
                &none   &kp F9  &kp F10  &kp F11  &kp F12  &none           &bt BT_CLR    &bt BT_SEL 4  &kp PSCRN      &none           &none  &tog BOOT   
                                         &kp C_PREV  &kp C_PP &kp C_NEXT   &none  &trans  &none
                >;
        };
        
        boot_layer {
            bindings = <
                       &none  &none  &none  &none  &bootloader     &bootloader  &none  &none  &none  &none 
                &none  &none  &none  &none  &none  &none           &none        &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none  &none           &none        &none  &none  &none  &none  &tog BOOT   
                                     &none  &none  &none           &none        &none  &none
                >;
        };

    };
};